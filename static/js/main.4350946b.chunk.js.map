{"version":3,"sources":["Header.js","User.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","id","react_router_dom","to","href","User","GoogleAuth","gapi","props","display","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadApi","window","load","initClient","client","init","apiKey","clientId","scope","discoveryDocs","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","setSigninStatus","document","getElementById","addEventListener","handleAuthClick","revokeAccess","get","signOut","signIn","disconnect","state","isAuthorized","user","userDisplay","currentUser","hasGrantedScopes","full","w3","ofa","wea","ig","fullName","toLowerCase","setState","console","log","innerHTML","style","concat","_this2","react_router","exact","path","render","src_User","assign","from","src_Header","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4350946b.chunk.js","sourcesContent":["import {\n    Link\n  } from 'react-router-dom';\nimport React from 'react';\nimport './Header.css';\n\nfunction Header() {\n\n    return (\n        <div className=\"Header\">\n            <header className=\"app-footer\">\n                <div id=\"auth-status\" className=\"footer-top\"></div>\n                <div id=\"sign-in-or-out-button\" className=\"footer\">Sign in</div>\n                <div id=\"revoke-access-button\" className=\"footer\">Revoke access</div>\n                <Link to=\"/about\" className=\"footer\">About</Link>\n                <Link to=\"/contact\" className=\"footer\">Contact</Link>\n                <a href=\"http://github.com/eamoses\" className=\"footer\">&copy; 2019 Emily Anne Moses</a>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './User.css';\n\nfunction User(props) {\n    return (\n        <div className=\"User\">\n            <h1>User Component</h1>\n            <h2>Welcome {props.display}</h2>\n        </div>\n    )\n}\n\nexport default User;","/* global gapi */\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport User from './User';\nvar GoogleAuth;\nvar gapi;\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthorized: false,\n      user: '',\n      userDisplay: ''\n    }\n  }\n  setSigninStatus() {\n    let user = GoogleAuth.currentUser.get();\n    let isAuthorized = user.hasGrantedScopes('https://www.googleapis.com/auth/drive.metadata.readonly');\n    if (isAuthorized) {\n      let first = user.w3.ofa\n      let last = user.w3.wea\n      let full = first+last\n      let display = user.w3.ig\n      let fullName = full.toLowerCase();\n      this.setState({ \n        isAuthorized: true,\n        user: fullName,\n        userDisplay: display\n      })\n      console.log(this.state.isAuthorized)\n      document.getElementById('sign-in-or-out-button').innerHTML = 'Sign out'\n      document.getElementById('revoke-access-button').style.display = 'inline-block'\n      document.getElementById('auth-status').innerHTML = `Welcome ${user.w3.ofa}, you are currently signed in and have granted access to this app.`\n    } else {\n      this.setState({\n        isAuthorized: false,\n        user: '',\n        userDisplay: ''\n      })\n      console.log(this.state.isAuthorized)\n      document.getElementById('sign-in-or-out-button').innerHTML = 'Sign in'\n      document.getElementById('revoke-access-button').style.display = 'none'\n      document.getElementById('auth-status').innerHTML = 'You have not authorized this app or you are signed out.'\n    }\n  }\n  loadApi = () => {\n    window.gapi.load('client:auth2', this.initClient)\n  }\n  initClient = () => {\n    gapi.client.init({\n      'apiKey': 'AIzaSyDLNIUK_i6qGGhf4YxAnTiVeuI6x-9GQmw',\n      'clientId': '575322948483-e66pcq6iejmjri05dgg2vr5ucd18hlaa.apps.googleusercontent.com',\n      'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n    }).then(() => {\n      GoogleAuth = gapi.auth2.getAuthInstance();\n      GoogleAuth.isSignedIn.listen(this.updateSigninStatus);\n      this.setSigninStatus();\n      document.getElementById('sign-in-or-out-button').addEventListener('click', () => {\n        this.handleAuthClick();\n      });\n      document.getElementById('revoke-access-button').addEventListener('click', () => {\n        this.revokeAccess();\n      });\n    });\n  }\n  handleAuthClick = () => {\n    if (GoogleAuth.isSignedIn.get()) {\n      GoogleAuth.signOut();\n    } else {\n      GoogleAuth.signIn();\n    }\n  }\n  revokeAccess = () => {\n    GoogleAuth.disconnect();\n  }\n  updateSigninStatus = () => {\n    this.setSigninStatus();\n  }\n  componentDidMount() {\n    this.loadApi();\n  }\n  render() {\n    const isAuthorized = this.state.isAuthorized;\n    const user = this.state.user;\n     return (\n      <Router>\n        { !isAuthorized ? (\n            <Switch>\n              <Route exact path=\"/\" />\n              <Redirect to=\"/\" />\n            </Switch>\n          ) : (\n            <Switch>\n              <Route exact path={`/u/${user}`} render={(props) => <User {...props} display={this.state.userDisplay} user={this.state.user} />} />\n              <Redirect from=\"/\" to={`/u/${user}`} />\n            </Switch>\n          )\n        }\n        <Header />\n      </Router>\n     );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}